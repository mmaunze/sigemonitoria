package sigemonitoria.vista.actualizacao;

import static java.awt.EventQueue.invokeLater;
import java.text.ParseException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import sigemonitoria.MetodosGerais;
import sigemonitoria.modelo.Caso;
import sigemonitoria.modelo.Doente;
import sigemonitoria.modelo.Utilizador;
import sigemonitoria.vista.MenuPrincipal;

/**
 *
 * @author Meldo Maunze
 */
public class UpdateInformacaoBasicaPaciente extends javax.swing.JFrame implements MetodosGerais {

    Caso caso = new Caso();
    Doente doente;
    Utilizador usuario;
    private UpdateLocalTrabalhoResidencia frame2 = null;

    boolean nidPreenchido = false;
    boolean dataRegistoCasoPreencido = false;
    boolean localDaUsPreenchido = false;
    boolean usDeAssistenciaPreenchido = false;
    boolean distritoNascimentoPreenchido = false;
    boolean provinciaNascimentoPreenchido = false;
    boolean dataNascimentoPreencido = false;
    boolean categoriaPreenchido = false;
    boolean carreiraPreenchido = false;
    boolean nomePreenchido = false;
    boolean nivelCarreiraPreenchido = false;
    boolean sexoPreencido = false;
    /**
     *
     * @param usuario the value of usuario
     * @param paciente the value of paciente
     */
    public UpdateInformacaoBasicaPaciente(Utilizador usuario, Doente paciente) {
        initComponents();
        this.usuario = usuario;
        this.doente = paciente;
        this.username.setText(usuario.getNomeCompleto());
        this.hospital.setText(usuario.getHospital().getNomeHospital());
        if (paciente != null) {
            List<Caso> casos = paciente.getCasoList();
            var ultimoCaso = casos.get(casos.size() - 1);
            this.caso = ultimoCaso;

            nidInput.setText(paciente.getNid());
            nidInput.setEnabled(true);

            habilitarCampo(dataRegistoCasoInput);
            this.dataRegistoCasoInput.setText(converterDataParaString(caso.getDataRegistoCaso()));
            dataRegistoCasoPreencido = true;

            habilitarCampo(nomePacienteInput);
            this.nomePacienteInput.setText(paciente.getNome());
            nomePreenchido = true;

            habilitarSelect(sexoInput);
            sexoInput.setSelectedItem(paciente.getSexo());
            sexoPreencido = true;

            habilitarCampo(carreiraInput);
            this.carreiraInput.setText(paciente.getCarreira());
            carreiraPreenchido = true;

            habilitarSelect(nivelCarreiraInput);
            nivelCarreiraInput.setSelectedItem(paciente.getNivelCarreira());
            nivelCarreiraPreenchido = true;

            habilitarCampo(categoriaInput);
            categoriaInput.setText(paciente.getCategoria());
            categoriaPreenchido = true;

            habilitarCampo(dataNascimentoInput);
            dataNascimentoInput.setText(converterDataParaString(paciente.getDataNascimento()));
            dataNascimentoPreencido = true;

            idadeInput.setText(String.valueOf(paciente.getIdade()));
            idadeInput.setEnabled(true);

            faixaEtariaInput.setText(paciente.getFaixaEtaria());
            faixaEtariaInput.setEnabled(true);

            habilitarSelect(provinciaNascimentoInput);
            provinciaNascimentoInput.setSelectedItem(paciente.getProvinciaNascimento());
            provinciaNascimentoPreenchido = true;

            habilitarCampo(distritoNascimentoInput);
            distritoNascimentoInput.setText(paciente.getDistritoNascimento());
            distritoNascimentoPreenchido = true;

            habilitarCampo(usAssistenciaInput);
            usAssistenciaInput.setText(caso.getUsDeAssistencia());
            usDeAssistenciaPreenchido = true;

            habilitarCampo(localUsInput);
            localUsInput.setText(caso.getUsDeAssistencia());
            localDaUsPreenchido = true;

            nidPreenchido = true;
            
            avancarBTN.setEnabled(true);
            avancarBTN.requestFocus();


        } else {
            String mensagem = "Nao foi fornecido nenhum NID\n, portanto,\n nao ha dados para actualizar,\n Redireccionando ao Menu";
            showMessageDialog(this, mensagem, "NID vazio", ERROR_MESSAGE);
            var escolherAccao = new MenuPrincipal(usuario);
            escolherAccao.setLocationRelativeTo(null);
            escolherAccao.setVisible(true);
            this.dispose();

        }
    }

    private UpdateInformacaoBasicaPaciente() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cabecalho = new javax.swing.JPanel();
        sistema1 = new javax.swing.JLabel();
        emblema = new javax.swing.JLabel();
        republica = new javax.swing.JLabel();
        provincia = new javax.swing.JLabel();
        servicos = new javax.swing.JLabel();
        hospital = new javax.swing.JLabel();
        cadastro = new javax.swing.JPanel();
        dataRegisto = new javax.swing.JLabel();
        nomePacienteLabel = new javax.swing.JLabel();
        categoriaLabel = new javax.swing.JLabel();
        carreiraLabel = new javax.swing.JLabel();
        usAssitenciaLabel = new javax.swing.JLabel();
        idadeLabel = new javax.swing.JLabel();
        provinciaNacimentoLabel = new javax.swing.JLabel();
        nomePacienteInput = new javax.swing.JTextField();
        dataRegistoCasoInput = new javax.swing.JTextField();
        usAssistenciaInput = new javax.swing.JTextField();
        carreiraInput = new javax.swing.JTextField();
        categoriaInput = new javax.swing.JTextField();
        idadeInput = new javax.swing.JTextField();
        sexoLabel = new javax.swing.JLabel();
        nidLabel = new javax.swing.JLabel();
        nidInput = new javax.swing.JTextField();
        dataNascimentoInput = new javax.swing.JTextField();
        nivelCarreiraLabel = new javax.swing.JLabel();
        distritoNascimentoLabel = new javax.swing.JLabel();
        localUsLabel = new javax.swing.JLabel();
        faixaEtariaInput = new javax.swing.JTextField();
        localUsInput = new javax.swing.JTextField();
        FaixaEtariaLabel = new javax.swing.JLabel();
        dataNascimentoLabel = new javax.swing.JLabel();
        provinciaNascimentoInput = new javax.swing.JComboBox<>();
        sexoInput = new javax.swing.JComboBox<>();
        nivelCarreiraInput = new javax.swing.JComboBox<>();
        distritoNascimentoInput = new javax.swing.JTextField();
        lema = new javax.swing.JLabel();
        recuarBTN = new javax.swing.JButton();
        avancarBTN = new javax.swing.JButton();
        gaurdarRascunhoBTN = new javax.swing.JButton();
        cancelarBTN = new javax.swing.JButton();
        username = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Informacoes Basicas Do Paciente");
        setResizable(false);

        cabecalho.setBackground(new java.awt.Color(255, 255, 255));
        cabecalho.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        sistema1.setText("Sistema de Informação e Monitoria da Saúde de Funcionários  Com  Doenças Crónicas");

        emblema.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sigemonitoria/vista/imagens/emblema.png"))); // NOI18N
        emblema.setToolTipText("");

        republica.setText("Republica de Moçambique");

        provincia.setText("Provincia de Nampula");

        servicos.setText("Serviço Provincial de Saúde");

        hospital.setText("Nome do Hospital");

        javax.swing.GroupLayout cabecalhoLayout = new javax.swing.GroupLayout(cabecalho);
        cabecalho.setLayout(cabecalhoLayout);
        cabecalhoLayout.setHorizontalGroup(
            cabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cabecalhoLayout.createSequentialGroup()
                .addContainerGap(196, Short.MAX_VALUE)
                .addGroup(cabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cabecalhoLayout.createSequentialGroup()
                        .addGap(176, 176, 176)
                        .addComponent(provincia))
                    .addGroup(cabecalhoLayout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addGroup(cabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(republica)
                            .addComponent(servicos)))
                    .addGroup(cabecalhoLayout.createSequentialGroup()
                        .addGap(189, 189, 189)
                        .addComponent(hospital))
                    .addGroup(cabecalhoLayout.createSequentialGroup()
                        .addGap(217, 217, 217)
                        .addComponent(emblema))
                    .addComponent(sistema1))
                .addGap(109, 109, 109))
        );
        cabecalhoLayout.setVerticalGroup(
            cabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cabecalhoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(emblema)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(republica)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(provincia)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(servicos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hospital)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sistema1)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        dataRegisto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dataRegisto.setText("Data de Registo do Caso");

        nomePacienteLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nomePacienteLabel.setText("Nome do Paciente");

        categoriaLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        categoriaLabel.setText("Categoria");

        carreiraLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        carreiraLabel.setText("Carreira");

        usAssitenciaLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        usAssitenciaLabel.setText("Us de Assistencia");

        idadeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        idadeLabel.setText("Idade");

        provinciaNacimentoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        provinciaNacimentoLabel.setText("Provincia de Nascimento");

        nomePacienteInput.setEditable(false);
        nomePacienteInput.setEnabled(false);
        nomePacienteInput.setFocusable(false);
        nomePacienteInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomePacienteInputActionPerformed(evt);
            }
        });

        dataRegistoCasoInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataRegistoCasoInputActionPerformed(evt);
            }
        });

        usAssistenciaInput.setEditable(false);
        usAssistenciaInput.setEnabled(false);
        usAssistenciaInput.setFocusable(false);
        usAssistenciaInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usAssistenciaInputActionPerformed(evt);
            }
        });

        carreiraInput.setEditable(false);
        carreiraInput.setEnabled(false);
        carreiraInput.setFocusable(false);
        carreiraInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carreiraInputActionPerformed(evt);
            }
        });

        categoriaInput.setEditable(false);
        categoriaInput.setEnabled(false);
        categoriaInput.setFocusable(false);
        categoriaInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoriaInputActionPerformed(evt);
            }
        });

        idadeInput.setEditable(false);
        idadeInput.setEnabled(false);
        idadeInput.setFocusable(false);

        sexoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sexoLabel.setText("Sexo");

        nidLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nidLabel.setText("NID");

        nidInput.setEditable(false);
        nidInput.setEnabled(false);
        nidInput.setFocusable(false);
        nidInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nidInputActionPerformed(evt);
            }
        });

        dataNascimentoInput.setEditable(false);
        dataNascimentoInput.setEnabled(false);
        dataNascimentoInput.setFocusable(false);
        dataNascimentoInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataNascimentoInputActionPerformed(evt);
            }
        });

        nivelCarreiraLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nivelCarreiraLabel.setText("Nivel de Carreira");

        distritoNascimentoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        distritoNascimentoLabel.setText("Distrito de Nascimento");

        localUsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        localUsLabel.setText("Local da Us");

        faixaEtariaInput.setEditable(false);
        faixaEtariaInput.setEnabled(false);
        faixaEtariaInput.setFocusable(false);

        localUsInput.setEditable(false);
        localUsInput.setEnabled(false);
        localUsInput.setFocusable(false);
        localUsInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localUsInputActionPerformed(evt);
            }
        });

        FaixaEtariaLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        FaixaEtariaLabel.setText("Faixa Etaria");

        dataNascimentoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dataNascimentoLabel.setText("Data de Nascimento");

        provinciaNascimentoInput.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "seleccionar", "Maputo", "Gaza", "Inhambane", "Sofala", "Manica", "Tete", "Zambezia", "Niassa", "Nampula", "Cabo Delgado" }));
        provinciaNascimentoInput.setEnabled(false);
        provinciaNascimentoInput.setFocusable(false);
        provinciaNascimentoInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                provinciaNascimentoInputActionPerformed(evt);
            }
        });

        sexoInput.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "seleccionar", "Homem", "Mulher" }));
        sexoInput.setEnabled(false);
        sexoInput.setFocusable(false);
        sexoInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sexoInputActionPerformed(evt);
            }
        });

        nivelCarreiraInput.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "seleccionar", "Basico", "Medio", "Superior", " " }));
        nivelCarreiraInput.setEnabled(false);
        nivelCarreiraInput.setFocusable(false);
        nivelCarreiraInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nivelCarreiraInputActionPerformed(evt);
            }
        });

        distritoNascimentoInput.setEditable(false);
        distritoNascimentoInput.setEnabled(false);
        distritoNascimentoInput.setFocusable(false);
        distritoNascimentoInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distritoNascimentoInputActionPerformed(evt);
            }
        });

        lema.setForeground(new java.awt.Color(255, 0, 0));
        lema.setText("O Nosso Maior Valor é a vida");

        recuarBTN.setBackground(new java.awt.Color(204, 255, 153));
        recuarBTN.setText("Menu Principal");
        recuarBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recuarBTNActionPerformed(evt);
            }
        });

        avancarBTN.setBackground(new java.awt.Color(153, 255, 153));
        avancarBTN.setText("Avancar");
        avancarBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avancarBTNActionPerformed(evt);
            }
        });

        gaurdarRascunhoBTN.setBackground(new java.awt.Color(102, 255, 255));
        gaurdarRascunhoBTN.setText("Guardar Rascunho");
        gaurdarRascunhoBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gaurdarRascunhoBTNActionPerformed(evt);
            }
        });

        cancelarBTN.setBackground(new java.awt.Color(255, 0, 0));
        cancelarBTN.setForeground(new java.awt.Color(255, 255, 255));
        cancelarBTN.setText("Cancelar");
        cancelarBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarBTNActionPerformed(evt);
            }
        });

        username.setEditable(false);
        username.setFocusable(false);
        username.setRequestFocusEnabled(false);

        javax.swing.GroupLayout cadastroLayout = new javax.swing.GroupLayout(cadastro);
        cadastro.setLayout(cadastroLayout);
        cadastroLayout.setHorizontalGroup(
            cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cadastroLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lema, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gaurdarRascunhoBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(recuarBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(avancarBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cancelarBTN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(cadastroLayout.createSequentialGroup()
                .addGroup(cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cadastroLayout.createSequentialGroup()
                        .addGroup(cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dataRegisto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nomePacienteLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(carreiraLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(categoriaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(idadeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(provinciaNacimentoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(usAssitenciaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dataRegistoCasoInput)
                            .addComponent(nomePacienteInput)
                            .addComponent(carreiraInput)
                            .addComponent(idadeInput)
                            .addComponent(categoriaInput)
                            .addComponent(usAssistenciaInput)
                            .addComponent(provinciaNascimentoInput, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(username))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dataNascimentoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sexoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nivelCarreiraLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nidLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FaixaEtariaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(distritoNascimentoLabel)
                    .addComponent(localUsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dataNascimentoInput, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(faixaEtariaInput, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(localUsInput, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nivelCarreiraInput, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sexoInput, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nidInput, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(distritoNascimentoInput, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33))
        );

        cadastroLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {FaixaEtariaLabel, dataNascimentoInput, dataNascimentoLabel, distritoNascimentoInput, distritoNascimentoLabel, faixaEtariaInput, localUsInput, localUsLabel, nidInput, nidLabel, nivelCarreiraInput, nivelCarreiraLabel, sexoInput, sexoLabel});

        cadastroLayout.setVerticalGroup(
            cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cadastroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cadastroLayout.createSequentialGroup()
                        .addGroup(cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(cadastroLayout.createSequentialGroup()
                                .addComponent(dataRegistoCasoInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(nomePacienteInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nomePacienteLabel)))
                            .addComponent(dataRegisto))
                        .addGap(12, 12, 12)
                        .addGroup(cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(carreiraLabel)
                            .addComponent(carreiraInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(categoriaInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(categoriaLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idadeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(idadeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(cadastroLayout.createSequentialGroup()
                                .addComponent(provinciaNacimentoLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(usAssistenciaInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(usAssitenciaLabel)))
                            .addComponent(provinciaNascimentoInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(cadastroLayout.createSequentialGroup()
                        .addGroup(cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nidLabel)
                            .addComponent(nidInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sexoInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sexoLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nivelCarreiraInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nivelCarreiraLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dataNascimentoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dataNascimentoInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FaixaEtariaLabel)
                            .addComponent(faixaEtariaInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(distritoNascimentoInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(distritoNascimentoLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(localUsInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(localUsLabel))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recuarBTN)
                    .addComponent(avancarBTN)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(cadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancelarBTN)
                    .addComponent(gaurdarRascunhoBTN)
                    .addComponent(lema))
                .addGap(35, 35, 35))
        );

        cadastroLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {FaixaEtariaLabel, carreiraInput, carreiraLabel, categoriaInput, categoriaLabel, dataNascimentoInput, dataRegisto, dataRegistoCasoInput, distritoNascimentoInput, distritoNascimentoLabel, faixaEtariaInput, idadeInput, idadeLabel, localUsInput, localUsLabel, nidInput, nidLabel, nivelCarreiraInput, nivelCarreiraLabel, nomePacienteInput, nomePacienteLabel, provinciaNacimentoLabel, provinciaNascimentoInput, sexoInput, sexoLabel, usAssistenciaInput, usAssitenciaLabel});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cabecalho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 97, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cadastro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(cabecalho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cadastro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

 

    private void localUsInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localUsInputActionPerformed
        var localUsValue = localUsInput.getText().trim();
        if (localUsValue != null && !localUsValue.trim().isEmpty()) {
            if (localUsValue.matches("[a-zA-Z ]+")) {
                localDaUsPreenchido = true;
                avancarBTN.requestFocus();
                avancarBTN.setEnabled(true);
                caso.setLocalDaUs(localUsValue);
            } else {
                showMessageDialog(this, "O local da US de Assitencia deve conter apenas letras.", "Entrada inválida", ERROR_MESSAGE);
                localUsInput.requestFocus();
            }
        } else {
            showMessageDialog(this, "Deve Preencher o Campo antes de avancar.", "Local da US Vazio", ERROR_MESSAGE);
            localUsInput.requestFocus();
        }
    }//GEN-LAST:event_localUsInputActionPerformed

    private void dataNascimentoInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataNascimentoInputActionPerformed
        var dataTexto = dataNascimentoInput.getText();
        if (dataTexto != null && !dataTexto.trim().isEmpty()) {
            dataNascimentoPreencido = true;
            if (dataValida(dataTexto)) {
                try {
                    doente.setDataNascimento(converterStringParaData(dataTexto));
                } catch (ParseException ex) {
                    Logger.getLogger(UpdateInformacaoBasicaPaciente.class.getName()).log(Level.SEVERE, null, ex);
                }
                idadeInput.setText(Integer.toString(calcularIdade(dataTexto)));
                doente.setIdade((short) calcularIdade(dataTexto));
                faixaEtariaInput.setText(calcularFaixaEtaria(calcularIdade(dataTexto)));
                idadeInput.setEnabled(true);
                faixaEtariaInput.setEnabled(true);
                doente.setFaixaEtaria(calcularFaixaEtaria(calcularIdade(dataTexto)));
                habilitarSelect(provinciaNascimentoInput);

            } else {
                showMessageDialog(this, "Formato de data inválido.\n Use dd/MM/aaaa.", "Data Invalida", ERROR_MESSAGE);
                dataNascimentoInput.setText("");
                desabilitarSelect(provinciaNascimentoInput);
                idadeInput.setEnabled(false);
                idadeInput.setText("");
                faixaEtariaInput.setEnabled(false);
                faixaEtariaInput.setText("");
            }
        } else {

            showMessageDialog(this, "Por favor, \n preencha a Data de Nascimento do Paciente primeiro.");
            dataNascimentoInput.requestFocus();
            desabilitarSelect(provinciaNascimentoInput);
            idadeInput.setEnabled(false);
            idadeInput.setText("");
            faixaEtariaInput.setEnabled(false);
            faixaEtariaInput.setText("");
        }
    }//GEN-LAST:event_dataNascimentoInputActionPerformed

    private void nidInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nidInputActionPerformed
        var nidValue = nidInput.getText().trim();
        if (nidValue.matches("\\d+")) {
            if (nidValue.length() == 5) {
                nidPreenchido = true;
                doente.setNid(nidValue);
                habilitarCampo(nomePacienteInput);
            } else {
                showMessageDialog(this, "O NID do Paciente deve ter exatamente 5 dígitos.", "5 Digitos Obrigatorios", ERROR_MESSAGE);
                nidInput.requestFocus();
                desabilitarCampo(nomePacienteInput);
            }
        } else {
            showMessageDialog(this, "O NID do Paciente deve conter apenas números.", "Apenas Numeros Permitidos", ERROR_MESSAGE);
            nidInput.requestFocus();
            desabilitarCampo(nomePacienteInput);
        }
    }//GEN-LAST:event_nidInputActionPerformed

    private void carreiraInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carreiraInputActionPerformed
        var carreiraValue = carreiraInput.getText().trim();
        if (carreiraValue != null && !carreiraValue.trim().isEmpty()) {
            if (carreiraValue.matches("[a-zA-Z ]+")) {
                carreiraPreenchido = true;
                doente.setCarreira(carreiraValue);
                habilitarSelect(nivelCarreiraInput);
            } else {
                showMessageDialog(this, "O nome do paciente deve conter apenas letras.", "Entrada inválida", ERROR_MESSAGE);
                carreiraInput.requestFocus();
                desabilitarSelect(nivelCarreiraInput);
            }
        } else {
            showMessageDialog(this, "Deve Preencher o Campo antes de avancar.", "Carreira Vazia", ERROR_MESSAGE);
            carreiraInput.requestFocus();
            desabilitarSelect(nivelCarreiraInput);
        }
    }//GEN-LAST:event_carreiraInputActionPerformed

    private void usAssistenciaInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usAssistenciaInputActionPerformed
        var usAssistenciaValue = usAssistenciaInput.getText().trim();
        if (usAssistenciaValue != null && !usAssistenciaValue.trim().isEmpty()) {
            if (usAssistenciaValue.matches("[a-zA-Z ]+")) {
                usDeAssistenciaPreenchido = true;
                habilitarCampo(localUsInput);
                caso.setUsDeAssistencia(usAssistenciaValue);
            } else {
                showMessageDialog(this, "A US de Assitencia deve conter apenas letras.", "Entrada inválida", ERROR_MESSAGE);
                usAssistenciaInput.requestFocus();
                desabilitarCampo(localUsInput);
            }
        } else {
            showMessageDialog(this, "Deve Preencher o Campo antes de avancar.", "US de Assitencia Vazia", ERROR_MESSAGE);
            usAssistenciaInput.requestFocus();
            desabilitarCampo(localUsInput);
        }
    }//GEN-LAST:event_usAssistenciaInputActionPerformed

    private void dataRegistoCasoInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataRegistoCasoInputActionPerformed
        var dataTexto = dataRegistoCasoInput.getText();
        if (dataTexto != null && !dataTexto.trim().isEmpty()) {
            dataRegistoCasoPreencido = true;
            if (dataValida(dataTexto)) {
                habilitarCampo(nidInput);
                try {
                    caso.setDataRegistoCaso(converterStringParaData(dataTexto));
                } catch (ParseException ex) {
                    Logger.getLogger(UpdateInformacaoBasicaPaciente.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                showMessageDialog(this, "Formato de data inválido.\n Use dd/MM/aaaa.", "Data Invalida", ERROR_MESSAGE);
                dataRegistoCasoInput.setText("");
                desabilitarCampo(nidInput);
            }
        } else {
            showMessageDialog(this, "Por favor, \npreencha o a Data de Registo do caso do Paciente primeiro.");
            dataRegistoCasoInput.requestFocus();
            desabilitarCampo(nidInput);
        }
    }//GEN-LAST:event_dataRegistoCasoInputActionPerformed

    private void nomePacienteInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomePacienteInputActionPerformed
        var nomeValue = nomePacienteInput.getText().trim();
        if (nomeValue != null && !nomeValue.trim().isEmpty()) {
            if (nomeValue.matches("[a-zA-Z ]+")) {
                nomePreenchido = true;
                doente.setNome(nomeValue);
                habilitarSelect(sexoInput);
            } else {
                showMessageDialog(this, "O nome do paciente deve conter apenas letras.", "ERRO", ERROR_MESSAGE);
                nomePacienteInput.requestFocus();
                desabilitarSelect(sexoInput);
            }
        } else {
            showMessageDialog(this, "Deve Preencher o Campo antes de avancar.", "Nome Vazio", ERROR_MESSAGE);
            nomePacienteInput.requestFocus();
            desabilitarSelect(sexoInput);
        }
    }//GEN-LAST:event_nomePacienteInputActionPerformed

    private void nivelCarreiraInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nivelCarreiraInputActionPerformed
        var valorSeleccionado = (String) nivelCarreiraInput.getSelectedItem();
        if (!("seleccionar".equals(valorSeleccionado))) {
            if ("Medio".equals(valorSeleccionado)
                    || "Superior".equals(valorSeleccionado)
                    || "Basico".equals(valorSeleccionado)) {
                nivelCarreiraPreenchido = true;
                doente.setNivelCarreira(valorSeleccionado);
                habilitarCampo(categoriaInput);
            } else {
                showMessageDialog(this, "Seleccione um valor válido para o campo nivel de Carreira.", "ERRO", ERROR_MESSAGE);
                nivelCarreiraInput.requestFocus();
                desabilitarCampo(categoriaInput);
            }
        } else {
            showMessageDialog(this, "Seleccionar um valor válido para o campo nivel de carreira.", "ERRO", ERROR_MESSAGE);
            nivelCarreiraInput.requestFocus();
            desabilitarCampo(categoriaInput);
        }
    }//GEN-LAST:event_nivelCarreiraInputActionPerformed

    private void cancelarBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarBTNActionPerformed
        showMessageDialog(this, "O cadastro foi cancelado");
        var escolherAccao = new MenuPrincipal(usuario);
        escolherAccao.setLocationRelativeTo(null);
        escolherAccao.setVisible(true);
       this.dispose();
    }//GEN-LAST:event_cancelarBTNActionPerformed

    private void gaurdarRascunhoBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gaurdarRascunhoBTNActionPerformed

        String mensagem = "Para aproveitar esta funcionalidade incrível, \n você pode fazer um upgrade do seu plano. \nContacte o desenvolvedor para mais detalhes";
        showMessageDialog(this, mensagem, "Funcionalidade Premium", ERROR_MESSAGE);

    }//GEN-LAST:event_gaurdarRascunhoBTNActionPerformed

    private void sexoInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sexoInputActionPerformed
        var valorSeleccionado = (String) sexoInput.getSelectedItem();
        if (!("seleccionar".equals(valorSeleccionado))) {
            if ("Mulher".equals(valorSeleccionado) || "Homem".equals(valorSeleccionado)) {
                doente.setSexo(valorSeleccionado);
                sexoPreencido = true;
                habilitarCampo(carreiraInput);
            } else {
                showMessageDialog(this, "Seleccione um valor válido para o campo Sexo.", "Sexo inválido", ERROR_MESSAGE);
                sexoInput.requestFocus();
                desabilitarCampo(carreiraInput);
            }
        } else {
            showMessageDialog(this, "Seleccionar um valor válido para o campo Sexo.", "Sexo inválido", ERROR_MESSAGE);
            sexoInput.requestFocus();
            desabilitarCampo(carreiraInput);
        }
    }//GEN-LAST:event_sexoInputActionPerformed

    private void categoriaInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoriaInputActionPerformed
        var categoriaValue = categoriaInput.getText().trim();
        if (categoriaValue != null && !categoriaValue.trim().isEmpty()) {
            if (categoriaValue.matches("[a-zA-Z ]+")) {
                categoriaPreenchido = true;
                doente.setCategoria(categoriaValue);
                habilitarCampo(dataNascimentoInput);
            } else {
                showMessageDialog(this, "A categoria deve conter apenas letras.", "ERRO", ERROR_MESSAGE);
                categoriaInput.requestFocus();
                desabilitarCampo(dataNascimentoInput);
            }
        } else {
            showMessageDialog(this, "Deve Preencher o Campo antes de avancar.", "Categoria Vazia", ERROR_MESSAGE);
            categoriaInput.requestFocus();
            desabilitarCampo(dataNascimentoInput);
        }
    }//GEN-LAST:event_categoriaInputActionPerformed

    private void distritoNascimentoInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distritoNascimentoInputActionPerformed
        var distritoValue = distritoNascimentoInput.getText().trim();
        if (distritoValue != null && !distritoValue.trim().isEmpty()) {
            if (distritoValue.matches("[a-zA-Z ]+")) {
                distritoNascimentoPreenchido = true;
                doente.setDistritoNascimento(distritoValue);
                habilitarCampo(usAssistenciaInput);
            } else {
                showMessageDialog(this, "O Distrito deve conter apenas letras.", "Entrada inválida", ERROR_MESSAGE);
                distritoNascimentoInput.requestFocus();
                desabilitarCampo(usAssistenciaInput);
            }
        } else {
            showMessageDialog(this, "Deve Preencher o Campo antes de avancar.", "Distrito Vazio", ERROR_MESSAGE);
            distritoNascimentoInput.requestFocus();
            desabilitarCampo(usAssistenciaInput);
        }
    }//GEN-LAST:event_distritoNascimentoInputActionPerformed

    private void provinciaNascimentoInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_provinciaNascimentoInputActionPerformed
        var valorSeleccionado = (String) provinciaNascimentoInput.getSelectedItem();
        if (!("seleccionar".equals(valorSeleccionado))) {
            if ("Maputo".equals(valorSeleccionado)
                    || "Gaza".equals(valorSeleccionado)
                    || "Inhambane".equals(valorSeleccionado)
                    || "Sofala".equals(valorSeleccionado)
                    || "Manica".equals(valorSeleccionado)
                    || "Zambezia".equals(valorSeleccionado)
                    || "Tete".equals(valorSeleccionado)
                    || "Nampula".equals(valorSeleccionado)
                    || "Niassa".equals(valorSeleccionado)
                    || "Cabo Delgado".equals(valorSeleccionado)) {
                provinciaNascimentoPreenchido = true;
                doente.setProvinciaNascimento(valorSeleccionado);
                habilitarCampo(distritoNascimentoInput);
            } else {
                showMessageDialog(this, "Seleccione uma provincia válida para", "Provincia inválida", ERROR_MESSAGE);
                provinciaNascimentoInput.requestFocus();
                desabilitarCampo(distritoNascimentoInput);
            }
        } else {
            showMessageDialog(this, "Seleccionar um valor válido para o campo nivel de carreira.", "Provincia inválida", ERROR_MESSAGE);
            nivelCarreiraInput.requestFocus();
            desabilitarCampo(distritoNascimentoInput);
        }

    }//GEN-LAST:event_provinciaNascimentoInputActionPerformed

    private void avancarBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avancarBTNActionPerformed
        if (nidPreenchido
                && dataRegistoCasoPreencido
                && localDaUsPreenchido
                && usDeAssistenciaPreenchido
                && distritoNascimentoPreenchido
                && provinciaNascimentoPreenchido
                && dataNascimentoPreencido
                && categoriaPreenchido
                && carreiraPreenchido
                && nivelCarreiraPreenchido
                && nomePreenchido
                && sexoPreencido) {

            if (frame2 == null) {
                frame2 = new UpdateLocalTrabalhoResidencia(this, doente, caso, usuario);
            }
            this.setVisible(false);

            try {
                // Configurações adicionais do frame2, se necessário
                UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                Logger.getLogger(UpdateInformacaoBasicaPaciente.class.getName()).log(Level.SEVERE, null, ex);
            }
            frame2.setLocationRelativeTo(null);
            frame2.setVisible(true);
        } else {
            showMessageDialog(this, "Deve Preencher Todos os Campos Antes de Avançar", "Campos Vazios", ERROR_MESSAGE);
        }
    }//GEN-LAST:event_avancarBTNActionPerformed

    private void recuarBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recuarBTNActionPerformed

        showMessageDialog(this, "Voltando ao Menu Principal \n O cadastro foi interrompido");
        var escolherAccao = new MenuPrincipal(usuario);
        escolherAccao.setLocationRelativeTo(null);
        escolherAccao.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_recuarBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateInformacaoBasicaPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        invokeLater(() -> {
            new UpdateInformacaoBasicaPaciente().setVisible(true);
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel FaixaEtariaLabel;
    private javax.swing.JButton avancarBTN;
    private javax.swing.JPanel cabecalho;
    private javax.swing.JPanel cadastro;
    private javax.swing.JButton cancelarBTN;
    private javax.swing.JTextField carreiraInput;
    private javax.swing.JLabel carreiraLabel;
    private javax.swing.JTextField categoriaInput;
    private javax.swing.JLabel categoriaLabel;
    private javax.swing.JTextField dataNascimentoInput;
    private javax.swing.JLabel dataNascimentoLabel;
    private javax.swing.JLabel dataRegisto;
    private javax.swing.JTextField dataRegistoCasoInput;
    private javax.swing.JTextField distritoNascimentoInput;
    private javax.swing.JLabel distritoNascimentoLabel;
    private javax.swing.JLabel emblema;
    private javax.swing.JTextField faixaEtariaInput;
    private javax.swing.JButton gaurdarRascunhoBTN;
    private javax.swing.JLabel hospital;
    private javax.swing.JTextField idadeInput;
    private javax.swing.JLabel idadeLabel;
    private javax.swing.JLabel lema;
    private javax.swing.JTextField localUsInput;
    private javax.swing.JLabel localUsLabel;
    private javax.swing.JTextField nidInput;
    private javax.swing.JLabel nidLabel;
    private javax.swing.JComboBox<String> nivelCarreiraInput;
    private javax.swing.JLabel nivelCarreiraLabel;
    private javax.swing.JTextField nomePacienteInput;
    private javax.swing.JLabel nomePacienteLabel;
    private javax.swing.JLabel provincia;
    private javax.swing.JLabel provinciaNacimentoLabel;
    private javax.swing.JComboBox<String> provinciaNascimentoInput;
    private javax.swing.JButton recuarBTN;
    private javax.swing.JLabel republica;
    private javax.swing.JLabel servicos;
    private javax.swing.JComboBox<String> sexoInput;
    private javax.swing.JLabel sexoLabel;
    private javax.swing.JLabel sistema1;
    private javax.swing.JTextField usAssistenciaInput;
    private javax.swing.JLabel usAssitenciaLabel;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables
}
